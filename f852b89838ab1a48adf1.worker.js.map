{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app/workers/brute-force/search.ts","webpack:///./src/app/common/enums/main-notifications.enum.ts","webpack:///./src/app/common/enums/main-actions.enum.ts","webpack:///./src/app/common/enums/notifications.enum.ts","webpack:///./src/app/common/enums/actions.enum.ts","webpack:///./src/app/common/enums/board-letters.enum.ts","webpack:///./src/app/common/entities/board.class.ts","webpack:///./src/app/common/entities/knight.class.ts","webpack:///./src/app/workers/brute-force/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Worker","MainNotifications","MainActions","Notifications","Actions","BoardLetters","board_class_Board","Board","createFromCells","cells","Error","result","_cells","cloneCells","createFromJSON","board","generateUntouchedCells","width","height","maxWidth","keys","length","row","j","push","untouchedCellValue","forEach","slice","this","castCoordinateFromMatrixToBoard","coordinate","letter","number","countOfRows","castCoordinateFromBoardToMatrix","column","asJSON","startingCellValue","knight_class_Knight","Knight","_board","countOfColumns","setBoard","checkIfMoveAvailable","findAllAvailableMoves","currentCoordinate","findLastMove","_availableMovesGenerators","map","moveGenerator","filter","possibleMoveCoordinate","findAllMovesCombinations","depth","moveCoordinate","moveNumber","_movesCombinations","newBoard","findAllMovesCombinationsRecursively","cellValue","currentCellValue","setStartingPosition","takeMove","untakeMove","knight","availableMoves","availableMove","_this","searchPrepared","searchInProgress","searchCompleted","intervalId","searchStatus","boardsToSolve","newSolutionsFoundPerThread","workers","workersActive","ctx","self","generateStartSearchMessage","tag","type","SearchStart","maxThreadCount","onmessage","ev","evData","data","SearchPrepare","minCount","generateBoardsToSolve","countOfThreads","movesTakenPerThread","movesTakenWithProgressPerThread","boardsSolvingPerThread","solutionsFoundPerThread","search_default","a","boardsPerThread","message","SearchPrepared","postMessage","mainSearchPrepareHandler","worker","index","SearchStarted","searchStartedHandler","SearchProgress","movesTaken","searchProgressHandler","SearchResult","searchResultHandler","SearchStopped","countOfMoves","boardToSolve","shift","String","every","searchStoppedHandler","onerror","error","console","reportInterval","setInterval","totalSolutionsFound","totalMovesTaken","solutionsFoundCountPerThread","reportMessage","SearchReport","movesTakenCountPerThread","boardsActivePerThread","clearInterval","terminate","stopMessage","lastReport","runInterval","mainSearchStartHandler","SearchStop","mainSearchStopHandler"],"mappings":"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","file":"f852b89838ab1a48adf1.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"a1b33b3085fda2db0a66.worker.js\");\n};","export enum MainNotifications {\r\n  SearchPrepared,\r\n  SearchStarted,\r\n  SearchReport,\r\n  SearchStopped,\r\n}\r\n","export enum MainActions {\r\n  SearchPrepare,\r\n  SearchStart,\r\n  SearchStop,\r\n}\r\n","export enum Notifications {\r\n    /**\r\n     * notifies the search has run into a error\r\n     */\r\n    SearchError,\r\n\r\n    /**\r\n     * notifies the search has been started\r\n     */\r\n    SearchStarted,\r\n    \r\n    /**\r\n     * notifies the search has been stopped\r\n     */\r\n    SearchStopped,\r\n\r\n    /**\r\n     * notifies about the search progress\r\n     */\r\n    SearchProgress,\r\n\r\n    /**\r\n     * notifies about a found solution\r\n     */\r\n    SearchResult\r\n}\r\n","/**\r\n * actions for messages to workers\r\n */\r\nexport enum Actions {\r\n    /**\r\n     * says to start searching for the solutions\r\n     */\r\n    SearchStart,\r\n    \r\n    /**\r\n     * says to stop searching for the solutions\r\n     */\r\n    SearchStop\r\n}\r\n","export enum BoardLetters {\r\n    A = 1,\r\n    B,\r\n    C,\r\n    D,\r\n    E,\r\n    F,\r\n    G,\r\n    H\r\n}\r\n","import { IBoard } from \"../interfaces/board.interface\";\r\nimport { IBoardCoordinate } from \"../interfaces/board-coordinate.interface\";\r\nimport { IMatrixCoordinate } from \"../interfaces/matrix-coordinate.interface\";\r\nimport { BoardLetters } from \"../enums/board-letters.enum\";\r\n\r\nexport const CELL_VALUE_UNTOUCHED = -1;\r\n\r\nexport const CELL_VALUE_STARTING = 0;\r\n\r\n/**\r\n * a chess board\r\n */\r\nexport class Board implements IBoard {\r\n  /**\r\n   * cell value if the knight hasn't moved yet\r\n   */\r\n  static readonly untouchedCellValue = CELL_VALUE_UNTOUCHED;\r\n\r\n  /**\r\n   * cell value of the starting position\r\n   */\r\n  static readonly startingCellValue = CELL_VALUE_STARTING;\r\n\r\n  /**\r\n   * creates and returns a board with specified cells\r\n   *\r\n   * @param cells cells for a chess board\r\n   */\r\n  static createFromCells(cells: number[][]): Board {\r\n    if (!cells) throw new Error(\"Cells are not specified.\");\r\n\r\n    const result = new Board();\r\n    result._cells = Board.cloneCells(cells);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * creates and returns a board based on JSON\r\n   *\r\n   * @param board a chess board as JSON\r\n   */\r\n  static createFromJSON(board: IBoard): Board {\r\n    if (!board) throw new Error(\"Board is not speicifed.\");\r\n\r\n    const result = new Board();\r\n    result._cells = Board.cloneCells(board.cells);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * generates and returns untouched cells\r\n   *\r\n   * @param width home many letters on the board (ex. A, B, C)\r\n   * @param height how many numbers on the board (ex. 1, 2, 3)\r\n   */\r\n  static generateUntouchedCells(width = 3, height = 3): number[][] {\r\n    if (width < 3) throw new Error(\"The board width cannot be less than 3.\");\r\n\r\n    const maxWidth = Object.keys(BoardLetters).length / 2;\r\n    if (width > maxWidth)\r\n      throw new Error(`The board width cannot be more than ${maxWidth}.`);\r\n\r\n    if (height < 3) throw new Error(\"The board height cannot be less than 3.\");\r\n\r\n    const result = [];\r\n\r\n    for (let i = 0; i < height; i++) {\r\n      const row = [];\r\n      for (let j = 0; j < width; j++) {\r\n        row.push(Board.untouchedCellValue);\r\n      }\r\n\r\n      result.push(row);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * clones cells and returns them\r\n   *\r\n   * @param cells cells to clone\r\n   */\r\n  static cloneCells(cells: number[][]): number[][] {\r\n    if (!cells) throw new Error(\"Cells are not specified.\");\r\n\r\n    const result: number[][] = [];\r\n\r\n    cells.forEach((row) => {\r\n      result.push(row.slice());\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * chess board cells\r\n   * value says the move number in the knight tour\r\n   */\r\n  get cells(): number[][] {\r\n    return this._cells;\r\n  }\r\n\r\n  /**\r\n   * count of columns on the board\r\n   */\r\n  get countOfColumns(): number {\r\n    return this.cells[0].length;\r\n  }\r\n\r\n  /**\r\n   * max count of rows on the board\r\n   */\r\n  get countOfRows(): number {\r\n    return this.cells.length;\r\n  }\r\n\r\n  /**\r\n   * creates an empty chess board\r\n   */\r\n  constructor() {\r\n    this._cells = [];\r\n  }\r\n\r\n  /**\r\n   * casts matrix coordinate and returns respective chess board coordinate\r\n   *\r\n   * @param coordinate matrix coordinate\r\n   */\r\n  castCoordinateFromMatrixToBoard(\r\n    coordinate: IMatrixCoordinate\r\n  ): IBoardCoordinate {\r\n    if (!coordinate) throw new Error(\"Coordinate is not specified.\");\r\n\r\n    return {\r\n      letter: coordinate.row + 1,\r\n      number: this.countOfRows - coordinate.row,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * casts chess board coordinate and returns respective matrix coordinate\r\n   *\r\n   * @param coordinate chess board coordinate\r\n   */\r\n  castCoordinateFromBoardToMatrix(\r\n    coordinate: IBoardCoordinate\r\n  ): IMatrixCoordinate {\r\n    if (!coordinate) throw new Error(\"Coordinate is not specified.\");\r\n\r\n    return {\r\n      row: this.countOfRows - coordinate.number,\r\n      column: coordinate.letter - 1,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * casts to a plain object and returns it\r\n   */\r\n  asJSON(): IBoard {\r\n    const cells = Board.cloneCells(this.cells);\r\n    return {\r\n      cells,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * chess board cells\r\n   */\r\n  private _cells: number[][];\r\n}\r\n","import { Board } from \"./board.class\";\r\nimport { IMatrixCoordinate } from \"../interfaces/matrix-coordinate.interface\";\r\n\r\n/**\r\n * the chess knight\r\n */\r\nexport class Knight {\r\n\r\n    /**\r\n     * the board on which the knight is\r\n     */\r\n    get board(): Board {\r\n        return this._board;\r\n    }\r\n\r\n    /**\r\n     * max count of moves in the knight's tour on the current board\r\n     */\r\n    get maxCountOfMoves(): number {\r\n        if (!this.board)\r\n            return 0;\r\n\r\n        return this.board.countOfRows * this.board.countOfColumns;\r\n    }\r\n\r\n    /**\r\n     * creates a knight on the specified board\r\n     * \r\n     * @param board board on which the knight is\r\n     */\r\n    constructor(board: Board) {\r\n        this.setBoard(board);\r\n    }\r\n\r\n    /**\r\n     * creates a knight on the specified board\r\n     * \r\n     * @param board board on which the knight is\r\n     */\r\n    static create(board: Board): Knight {\r\n        if (!board)\r\n            throw new Error('Board is not specified.');\r\n\r\n        return new Knight(board);\r\n    }\r\n\r\n    /**\r\n     * sets the specified board for the knight\r\n     * \r\n     * @param board a chess board\r\n     */\r\n    setBoard(board: Board) {\r\n        if (!board)\r\n            throw new Error('Board is not specified.');\r\n\r\n        this._board = board;\r\n    }\r\n\r\n    /**\r\n     * checks if the move is available to the knight\r\n     * \r\n     * @param coordinate move coordinate\r\n     */\r\n    checkIfMoveAvailable(coordinate: IMatrixCoordinate): boolean {\r\n        if (!coordinate)\r\n            throw new Error('Coordinate is not specified.');\r\n\r\n        return  coordinate.column >= 0 &&\r\n                coordinate.row >= 0 &&\r\n                coordinate.column < this.board.countOfColumns &&\r\n                coordinate.row < this.board.countOfRows &&\r\n                this.board.cells[coordinate.row][coordinate.column] === Board.untouchedCellValue;\r\n    }\r\n\r\n    /**\r\n     * returns all available moves of the knight on the current board\r\n     * \r\n     * @param currentCoordinate current coordinate of the knight\r\n     */\r\n    findAllAvailableMoves(currentCoordinate: IMatrixCoordinate = null): IMatrixCoordinate[] {\r\n        if (!currentCoordinate) {\r\n            currentCoordinate = this.findLastMove();\r\n        }\r\n\r\n        return this._availableMovesGenerators\r\n            .map(moveGenerator => moveGenerator(currentCoordinate))\r\n            .filter(possibleMoveCoordinate => possibleMoveCoordinate !== null);\r\n    }\r\n\r\n    /**\r\n     * finds and returns all possible move combinations with specified parameters\r\n     * \r\n     * @param depth depth of the search\r\n     * @param moveCoordinate coordinate to start search from\r\n     * @param moveNumber move number on the specified coordinate\r\n     */\r\n    findAllMovesCombinations(depth: number, moveCoordinate: IMatrixCoordinate = null, moveNumber: number = null): Board[] {\r\n        if (depth < 1)\r\n            throw new Error('Depth cannot be less than 1.');\r\n\r\n        if (moveCoordinate === null) {\r\n            moveCoordinate = this.findLastMove();\r\n\r\n            if (moveCoordinate === null)\r\n                throw new Error('Cannot determine the coordinate to start search from.');\r\n        }\r\n\r\n        if (moveNumber === null) {\r\n            moveNumber = this.board.cells[moveCoordinate.row][moveCoordinate.column];\r\n        }\r\n\r\n        this._movesCombinations = [];\r\n\r\n        const newBoard = Board.createFromJSON(this.board.asJSON());\r\n        this.findAllMovesCombinationsRecursively(newBoard, moveCoordinate, moveNumber, depth);\r\n\r\n        return this._movesCombinations;\r\n    }\r\n    \r\n    /**\r\n     * searchs for the last move on the board and returns its coordinate on success\r\n     * returns NULL otherwise\r\n     */\r\n    findLastMove(): IMatrixCoordinate {\r\n        if (!this.board)\r\n            throw new Error('Board is not specified.');\r\n\r\n        let result: IMatrixCoordinate = null;\r\n\r\n        let row = -1;\r\n        let column = -1;\r\n        let cellValue = Board.untouchedCellValue;\r\n\r\n        for (let i = 0; i < this.board.countOfRows; i++) {\r\n            for (let j = 0; j < this.board.countOfColumns; j++) {\r\n\r\n                let currentCellValue = this.board.cells[i][j];\r\n                if (currentCellValue > cellValue) {\r\n                    row = i;\r\n                    column = j;\r\n                    cellValue = currentCellValue;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (cellValue !== Board.untouchedCellValue && row !== -1 && column !== -1) {\r\n            result = { row, column };\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * sets starting position of the knight on the board\r\n     * \r\n     * @param coordinate coordinate to set the starting position\r\n     */\r\n    setStartingPosition(coordinate: IMatrixCoordinate) {\r\n        if (!coordinate)\r\n            throw new Error('Coordinate is not specified.');\r\n\r\n        this.board.cells[coordinate.row][coordinate.column] = Board.startingCellValue;\r\n    }\r\n\r\n    /**\r\n     * Takes the specified move on the current board\r\n     * \r\n     * @param coordinate move coordinate\r\n     * @param moveNumber the move number\r\n     */\r\n    takeMove(coordinate: IMatrixCoordinate, moveNumber: number) {\r\n        if (!coordinate)\r\n            throw new Error('Coordinate is not specified.');\r\n\r\n        if (moveNumber <= Board.startingCellValue)\r\n            throw new Error(`Move number should be greater than ${Board.startingCellValue}`);\r\n\r\n        if (!this.checkIfMoveAvailable(coordinate))\r\n            throw new Error('Moving on the unavailable cell.');\r\n\r\n        this.board.cells[coordinate.row][coordinate.column] = moveNumber;\r\n    }\r\n\r\n    /**\r\n     * Untakes the specified move on the current board\r\n     * \r\n     * @param coordinate move coordinate\r\n     */\r\n    untakeMove(coordinate: IMatrixCoordinate) {\r\n        if (!coordinate)\r\n            throw new Error('Coordinate is not specified.');\r\n\r\n        this.board.cells[coordinate.row][coordinate.column] = Board.untouchedCellValue;\r\n    }\r\n\r\n    /**\r\n     * the board on which the knight is\r\n     */\r\n    private _board: Board = null;\r\n\r\n    /**\r\n     * moves combinations used by some private methods\r\n     */\r\n    private _movesCombinations: Board[] = null;\r\n\r\n    /**\r\n     * moves generators of all possible moves of the knight\r\n     */\r\n    private _availableMovesGenerators: ((currentCoordinate: IMatrixCoordinate) => IMatrixCoordinate)[] = [\r\n        /**\r\n         * **\r\n         * *\r\n         * &\r\n         */\r\n        (currentCoordinate: IMatrixCoordinate) => {\r\n            const column = currentCoordinate.column + 1;\r\n            const row = currentCoordinate.row - 2;\r\n            const coordinate = { column, row };\r\n            return this.checkIfMoveAvailable(coordinate) ? coordinate : null;\r\n        },\r\n        /**\r\n         * ***\r\n         * &\r\n         */\r\n        (currentCoordinate: IMatrixCoordinate) => {\r\n            const column = currentCoordinate.column + 2;\r\n            const row = currentCoordinate.row - 1;\r\n            const coordinate = { column, row };\r\n            return this.checkIfMoveAvailable(coordinate) ? coordinate : null;\r\n        },\r\n        /**\r\n         * &\r\n         * ***\r\n         */\r\n        (currentCoordinate: IMatrixCoordinate) => {\r\n            const column = currentCoordinate.column + 2;\r\n            const row = currentCoordinate.row + 1;\r\n            const coordinate = { column, row };\r\n            return this.checkIfMoveAvailable(coordinate) ? coordinate : null;\r\n        },\r\n        /**\r\n         * &\r\n         * *\r\n         * **\r\n         */\r\n        (currentCoordinate: IMatrixCoordinate) => {\r\n            const column = currentCoordinate.column + 1;\r\n            const row = currentCoordinate.row + 2;\r\n            const coordinate = { column, row };\r\n            return this.checkIfMoveAvailable(coordinate) ? coordinate : null;\r\n        },\r\n        /**\r\n         *  &\r\n         *  *\r\n         * **\r\n         */\r\n        (currentCoordinate: IMatrixCoordinate) => {\r\n            const column = currentCoordinate.column - 1;\r\n            const row = currentCoordinate.row + 2;\r\n            const coordinate = { column, row };\r\n            return this.checkIfMoveAvailable(coordinate) ? coordinate : null;\r\n        },\r\n        /**\r\n         *   &\r\n         * ***\r\n         */\r\n        (currentCoordinate: IMatrixCoordinate) => {\r\n            const column = currentCoordinate.column - 2;\r\n            const row = currentCoordinate.row + 1;\r\n            const coordinate = { column, row };\r\n            return this.checkIfMoveAvailable(coordinate) ? coordinate : null;\r\n        },\r\n        /**\r\n         * ***\r\n         *   &\r\n         */\r\n        (currentCoordinate: IMatrixCoordinate) => {\r\n            const column = currentCoordinate.column - 2;\r\n            const row = currentCoordinate.row - 1;\r\n            const coordinate = { column, row };\r\n            return this.checkIfMoveAvailable(coordinate) ? coordinate : null;\r\n        },\r\n        /**\r\n         * **\r\n         *  *\r\n         *  &\r\n         */\r\n        (currentCoordinate: IMatrixCoordinate) => {\r\n            const column = currentCoordinate.column - 1;\r\n            const row = currentCoordinate.row - 2;\r\n            const coordinate = { column, row };\r\n            return this.checkIfMoveAvailable(coordinate) ? coordinate : null;\r\n        }\r\n    ];\r\n\r\n    /**\r\n     * searchs for all possible moves combinations recursively\r\n     * \r\n     * @param board current board\r\n     * @param moveCoordinate current move coordinate\r\n     * @param moveNumber current move number\r\n     * @param depth depth counter\r\n     */\r\n    private findAllMovesCombinationsRecursively(board: Board, moveCoordinate: IMatrixCoordinate, moveNumber: number, depth: number) {\r\n        if (depth === 0)\r\n            return;\r\n        \r\n        const knight = Knight.create(board);\r\n\r\n        const availableMoves = knight.findAllAvailableMoves(moveCoordinate);\r\n        for (let i = 0; i < availableMoves.length; i++) {\r\n            const availableMove = availableMoves[i];\r\n\r\n            knight.takeMove(availableMove, moveNumber + 1);\r\n\r\n            const newBoard = Board.createFromJSON(knight.board.asJSON());\r\n\r\n            if (depth === 1) {\r\n                this._movesCombinations.push(newBoard);\r\n            } else {\r\n                this.findAllMovesCombinationsRecursively(newBoard, availableMove, moveNumber + 1, depth - 1);\r\n            }\r\n\r\n            knight.untakeMove(availableMove);\r\n        }\r\n    }\r\n\r\n}\r\n","import BruteForceWorker from \"worker-loader!./search\";\r\n\r\nimport { MainNotifications } from \"../../common/enums/main-notifications.enum\";\r\nimport { MainActions } from \"../../common/enums/main-actions.enum\";\r\nimport { Notifications } from \"../../common/enums/notifications.enum\";\r\nimport { Actions } from \"../../common/enums/actions.enum\";\r\n\r\nimport { IBoard } from \"../../common/interfaces/board.interface\";\r\n\r\nimport { IMainActionMessage } from \"../../common/interfaces/main-messages/actions/main-action-message.interface\";\r\nimport { IPrepareMainSearchMessage } from \"../../common/interfaces/main-messages/actions/prepare-main-search-message.interface\";\r\nimport { IStartMainSearchMessage } from \"../../common/interfaces/main-messages/actions/start-main-search-message.interface\";\r\nimport { IStopMainSearchMessage } from \"../../common/interfaces/main-messages/actions/stop-main-search-message.interface\";\r\nimport { IMainSearchPreparedMessage } from \"../../common/interfaces/main-messages/notifications/main-search-prepared-message.interface\";\r\nimport { IMainSearchStartedMessage } from \"../../common/interfaces/main-messages/notifications/main-search-started-message.interface\";\r\nimport { IMainSearchReportMessage } from \"../../common/interfaces/main-messages/notifications/main-search-report-message.interface\";\r\nimport { IMainSearchStoppedMessage } from \"../../common/interfaces/main-messages/notifications/main-search-stopped-message.interface\";\r\n\r\nimport { IStartSearchMessage } from \"../../common/interfaces/messages/actions/start-search-message.interface\";\r\nimport { INotificationMessage } from \"../../common/interfaces/messages/notifications/notification-message.interface\";\r\nimport { ISearchStartedMessage } from \"../../common/interfaces/messages/notifications/search-started.interface\";\r\nimport { ISearchProgressMessage } from \"../../common/interfaces/messages/notifications/search-progress.interface\";\r\nimport { ISearchResultMessage } from \"../../common/interfaces/messages/notifications/search-result.interface\";\r\nimport { ISearchStoppedMessage } from \"../../common/interfaces/messages/notifications/search-stopped.interface\";\r\n\r\nimport { Knight } from \"../../common/entities/knight.class\";\r\nimport { Board } from \"../../common/entities/board.class\";\r\n\r\ninterface ISearchStatus {\r\n  movesTakenPerThread: number[];\r\n  movesTakenWithProgressPerThread: number[];\r\n  boardsSolvingPerThread: IBoard[];\r\n  solutionsFoundPerThread: IBoard[][];\r\n}\r\n\r\nconst ctx: Worker = self as any;\r\n\r\nlet searchPrepared: boolean;\r\nlet searchInProgress: boolean;\r\nlet searchCompleted: boolean;\r\n\r\nlet intervalId: NodeJS.Timer;\r\n\r\nlet searchStatus: ISearchStatus;\r\n\r\nlet boardsToSolve: Board[];\r\nlet newSolutionsFoundPerThread: IBoard[][];\r\n\r\nlet workers: Worker[];\r\nlet workersActive: boolean[];\r\n\r\nctx.onmessage = (ev) => {\r\n  const evData = ev.data as IMainActionMessage;\r\n\r\n  switch (evData.type) {\r\n    case MainActions.SearchPrepare:\r\n      mainSearchPrepareHandler(evData as IPrepareMainSearchMessage);\r\n      break;\r\n    case MainActions.SearchStart:\r\n      mainSearchStartHandler(evData as IStartMainSearchMessage);\r\n      break;\r\n    case MainActions.SearchStop:\r\n      mainSearchStopHandler(evData as IStopMainSearchMessage);\r\n      break;\r\n  }\r\n};\r\n\r\nctx.onerror = (error) => console.error(error);\r\n\r\nfunction mainSearchPrepareHandler(data: IPrepareMainSearchMessage) {\r\n  if (searchInProgress) {\r\n    throw new Error(\"The search is already in progress.\");\r\n  }\r\n\r\n  const knight = new Knight(Board.createFromJSON(data.board));\r\n  boardsToSolve = generateBoardsToSolve(knight, data.countOfThreads);\r\n\r\n  workers = [];\r\n  workersActive = [];\r\n\r\n  newSolutionsFoundPerThread = [];\r\n\r\n  searchStatus = {\r\n    movesTakenPerThread: [],\r\n    movesTakenWithProgressPerThread: [],\r\n    boardsSolvingPerThread: [],\r\n    solutionsFoundPerThread: [],\r\n  };\r\n\r\n  for (let i = 0; i < data.countOfThreads; i++) {\r\n    workers.push(new BruteForceWorker());\r\n    workersActive.push(false);\r\n\r\n    searchStatus.movesTakenPerThread.push(0);\r\n    searchStatus.movesTakenWithProgressPerThread.push(0);\r\n    searchStatus.solutionsFoundPerThread.push([]);\r\n  }\r\n\r\n  const boardsPerThread = boardsToSolve\r\n    .slice(0, data.countOfThreads)\r\n    .map((i) => i.asJSON());\r\n\r\n  const message: IMainSearchPreparedMessage = {\r\n    type: MainNotifications.SearchPrepared,\r\n    boardsPerThread,\r\n  };\r\n\r\n  ctx.postMessage(message);\r\n\r\n  searchPrepared = true;\r\n  searchCompleted = false;\r\n}\r\n\r\nfunction mainSearchStartHandler(data: IStartMainSearchMessage) {\r\n  if (!searchPrepared) {\r\n    throw new Error(\"The search should be prepared first.\");\r\n  }\r\n\r\n  if (searchInProgress) {\r\n    throw new Error(\"The search is already in progress.\");\r\n  }\r\n\r\n  runWorkers();\r\n  runInterval(data.reportInterval);\r\n\r\n  const message: IMainSearchStartedMessage = {\r\n    type: MainNotifications.SearchStarted,\r\n  };\r\n\r\n  ctx.postMessage(message);\r\n\r\n  searchInProgress = true;\r\n}\r\n\r\nfunction mainSearchStopHandler(data: IStopMainSearchMessage) {\r\n  if (!searchInProgress) {\r\n    throw new Error(\"The search is not in progress.\");\r\n  }\r\n\r\n  searchPrepared = false;\r\n  searchInProgress = false;\r\n  searchCompleted = true;\r\n}\r\n\r\nfunction runWorkers() {\r\n  workers.forEach((worker, index) => {\r\n    worker.onmessage = (ev) => {\r\n      const evData = ev.data as INotificationMessage;\r\n\r\n      switch (evData.type) {\r\n        case Notifications.SearchStarted:\r\n          searchStartedHandler(evData as ISearchStartedMessage);\r\n          break;\r\n        case Notifications.SearchProgress:\r\n          searchProgressHandler(evData as ISearchProgressMessage);\r\n          break;\r\n        case Notifications.SearchResult:\r\n          searchResultHandler(evData as ISearchResultMessage);\r\n          break;\r\n        case Notifications.SearchStopped:\r\n          searchStoppedHandler(evData as ISearchStoppedMessage);\r\n          break;\r\n      }\r\n    };\r\n\r\n    worker.onerror = (error) => console.error(error);\r\n\r\n    const boardToSolve = boardsToSolve.shift();\r\n\r\n    const message = generateStartSearchMessage(\r\n      String(index),\r\n      boardToSolve.asJSON()\r\n    );\r\n\r\n    worker.postMessage(message);\r\n    workersActive[index] = true;\r\n  });\r\n}\r\n\r\nfunction searchStartedHandler(data: ISearchStartedMessage) {\r\n  const index = +data.tag;\r\n\r\n  searchStatus.boardsSolvingPerThread[index] = data.board;\r\n}\r\n\r\nfunction searchProgressHandler(data: ISearchProgressMessage) {\r\n  const index = +data.tag;\r\n\r\n  searchStatus.movesTakenWithProgressPerThread[index] =\r\n    searchStatus.movesTakenPerThread[index] + data.movesTaken;\r\n}\r\n\r\nfunction searchResultHandler(data: ISearchResultMessage) {\r\n  const index = +data.tag;\r\n  searchStatus.solutionsFoundPerThread[index].push(data.board);\r\n\r\n  if (!newSolutionsFoundPerThread[index]) {\r\n    newSolutionsFoundPerThread[index] = [];\r\n  }\r\n\r\n  newSolutionsFoundPerThread[index].push(data.board);\r\n}\r\n\r\nfunction searchStoppedHandler(data: ISearchStoppedMessage) {\r\n  const index = +data.tag;\r\n\r\n  searchStatus.movesTakenPerThread[index] += data.countOfMoves;\r\n  searchStatus.movesTakenWithProgressPerThread[index] =\r\n    searchStatus.movesTakenPerThread[index];\r\n\r\n  const boardToSolve = boardsToSolve.shift();\r\n  if (boardToSolve) {\r\n    const message = generateStartSearchMessage(\r\n      String(index),\r\n      boardToSolve.asJSON()\r\n    );\r\n\r\n    workers[index].postMessage(message);\r\n  } else {\r\n    workersActive[index] = false;\r\n\r\n    if (workersActive.every((i) => !i)) {\r\n      searchCompleted = true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction runInterval(reportInterval: number) {\r\n  intervalId = setInterval(() => {\r\n    let totalSolutionsFound = 0;\r\n    let totalMovesTaken = 0;\r\n\r\n    for (let i = 0; i < workers.length; i++) {\r\n      totalSolutionsFound += searchStatus.solutionsFoundPerThread[i].length;\r\n      totalMovesTaken += searchStatus.movesTakenWithProgressPerThread[i];\r\n    }\r\n\r\n    const solutionsFoundCountPerThread = searchStatus.solutionsFoundPerThread.map(\r\n      (i) => i.length\r\n    );\r\n\r\n    const reportMessage: IMainSearchReportMessage = {\r\n      type: MainNotifications.SearchReport,\r\n      totalSolutionsFound,\r\n      totalMovesTaken,\r\n      newSolutionsFoundPerThread,\r\n      solutionsFoundCountPerThread,\r\n      movesTakenCountPerThread: searchStatus.movesTakenWithProgressPerThread,\r\n      boardsPerThread: searchStatus.boardsSolvingPerThread,\r\n      boardsActivePerThread: workersActive,\r\n    };\r\n\r\n    newSolutionsFoundPerThread = [];\r\n\r\n    if (searchCompleted) {\r\n      clearInterval(intervalId);\r\n\r\n      workers.forEach((i) => i.terminate());\r\n\r\n      const stopMessage: IMainSearchStoppedMessage = {\r\n        type: MainNotifications.SearchStopped,\r\n        lastReport: reportMessage,\r\n      };\r\n\r\n      ctx.postMessage(stopMessage);\r\n    } else {\r\n      ctx.postMessage(reportMessage);\r\n    }\r\n  }, reportInterval);\r\n}\r\n\r\n/**\r\n * generates boards to solve\r\n * @param knight current chess knight\r\n * @param minCount min count of boards to generate\r\n */\r\nfunction generateBoardsToSolve(knight: Knight, minCount: number) {\r\n  let boardsToSolve: Board[] = [];\r\n\r\n  let depth = 0;\r\n\r\n  do {\r\n    depth++;\r\n\r\n    boardsToSolve = knight.findAllMovesCombinations(depth);\r\n  } while (boardsToSolve.length < minCount);\r\n\r\n  return boardsToSolve;\r\n}\r\n\r\n/**\r\n * generates message saying to workers to start searching\r\n * @param tag worker tag\r\n * @param board board to solve\r\n */\r\nfunction generateStartSearchMessage(\r\n  tag: string,\r\n  board: IBoard\r\n): IStartSearchMessage {\r\n  const type = Actions.SearchStart;\r\n  const maxThreadCount: number = null;\r\n\r\n  return {\r\n    tag,\r\n    type,\r\n    board,\r\n    maxThreadCount,\r\n  };\r\n}\r\n"],"sourceRoot":""}